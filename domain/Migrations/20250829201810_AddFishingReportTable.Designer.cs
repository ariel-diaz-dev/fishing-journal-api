// <auto-generated />
using System;
using Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250829201810_AddFishingReportTable")]
    partial class AddFishingReportTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Domain.Models.FishSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ScientificName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Order");

                    b.ToTable("FishSpecies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Highly prized gamefish with distinctive black lateral line. Found in mangroves, inlets, and shallow flats. Slot limit 28-33 inches.",
                            Name = "Common Snook",
                            Order = 1,
                            ScientificName = "Centropomus undecimalis"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "The 'Silver King' - massive gamefish known for spectacular jumps. Catch and release only. Found in channels, flats, and backcountry.",
                            Name = "Tarpon",
                            Order = 2,
                            ScientificName = "Megalops atlanticus"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Copper-bronze fish with distinctive black spots. Excellent table fare and strong fighter. Found on flats and in shallow water.",
                            Name = "Redfish (Red Drum)",
                            Order = 3,
                            ScientificName = "Sciaenops ocellatus"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Popular inshore gamefish with dark spots. Excellent eating and fun to catch. Found over grass flats and shallow waters.",
                            Name = "Spotted Seatrout",
                            Order = 4,
                            ScientificName = "Cynoscion nebulosus"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "The 'Gray Ghost' of the flats. Extremely wary and challenging to catch. Primarily found on shallow sandy flats in the Keys.",
                            Name = "Bonefish",
                            Order = 5,
                            ScientificName = "Albula vulpes"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Elite gamefish of the flats. Difficult to hook and strong fighter. Found on sandy flats and around wrecks in the Keys.",
                            Name = "Permit",
                            Order = 6,
                            ScientificName = "Trachinotus falcatus"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Excellent table fare found around mangroves and structure. Gray to reddish coloration with two canine teeth.",
                            Name = "Mangrove Snapper",
                            Order = 7,
                            ScientificName = "Lutjanus griseus"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Aggressive predator and strong fighter. Bronze to yellow coloration. Found in schools throughout South Florida waters.",
                            Name = "Jack Crevalle",
                            Order = 8,
                            ScientificName = "Caranx hippos"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fierce predator with razor-sharp teeth. Excellent for catching on artificial lures. Found around reefs and flats.",
                            Name = "Barracuda",
                            Order = 9,
                            ScientificName = "Sphyraena barracuda"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Black and white striped fish with human-like teeth. Excellent table fare. Found around structure, docks, and bridges.",
                            Name = "Sheepshead",
                            Order = 10,
                            ScientificName = "Archosargus probatocephalus"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Large bottom-dwelling fish with barbels under chin. Found in shallow waters and around oyster bars.",
                            Name = "Black Drum",
                            Order = 11,
                            ScientificName = "Pogonias cromis"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Flatfish that lies on sandy bottoms. Excellent table fare. Both eyes on the same side of head when mature.",
                            Name = "Flounder",
                            Order = 12,
                            ScientificName = "Paralichthys albigutta"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Acrobatic fighter that jumps when hooked. Silver coloration. Found in shallow waters and canals throughout South Florida.",
                            Name = "Ladyfish",
                            Order = 13,
                            ScientificName = "Elops saurus"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fast-swimming fish with yellow spots. Good table fare when fresh. Found in nearshore and inshore waters.",
                            Name = "Spanish Mackerel",
                            Order = 14,
                            ScientificName = "Scomberomorus maculatus"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Large brown fish often mistaken for shark. Excellent eating and strong fighter. Often follows rays and sharks.",
                            Name = "Cobia",
                            Order = 15,
                            ScientificName = "Rachycentron canadum"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Unique fish that floats on its side mimicking debris. Excellent table fare. Found around floating objects and structure.",
                            Name = "Tripletail",
                            Order = 16,
                            ScientificName = "Lobotes surinamensis"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Premium table fare with silvery, laterally compressed body. Found on sandy beaches and flats.",
                            Name = "Pompano",
                            Order = 17,
                            ScientificName = "Trachinotus carolinus"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Small jack species often found in schools. Good live bait for larger fish. Blue-green coloration on top.",
                            Name = "Blue Runner",
                            Order = 18,
                            ScientificName = "Caranx crysos"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Common baitfish with distinctive dark spot. Found around grass beds and structure. Often used as bait for larger fish.",
                            Name = "Pinfish",
                            Order = 19,
                            ScientificName = "Lagodon rhomboides"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Common reef fish that makes grunting sound. Silver with blue and yellow stripes. Found around structure and reefs.",
                            Name = "Grunt",
                            Order = 20,
                            ScientificName = "Haemulon plumieri"
                        });
                });

            modelBuilder.Entity("Domain.Models.FishingReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DaytimeTemperature")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstHighTide")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstLowTide")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("SecondHighTide")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondLowTide")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TripDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("WaterTemperature")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("WeatherConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WindDirection")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("WindSpeedInMilesPerHour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DeletedDate");

                    b.HasIndex("LocationId");

                    b.HasIndex("TripDate");

                    b.ToTable("FishingReports");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Order");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Southern headquarters of Everglades National Park, located at the end of the only road through the park from Florida City.",
                            Latitude = 25.14127m,
                            Longitude = -80.92764m,
                            Name = "Flamingo, Everglades National Park",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fishing area near Card Sound Bridge, connecting mainland Florida to the Upper Keys.",
                            Latitude = 25.2873m,
                            Longitude = -80.3685m,
                            Name = "Card Sound, Florida Keys",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Small island in the Lower Florida Keys at Mile Marker 40, west end of the Seven Mile Bridge.",
                            Latitude = 24.681084m,
                            Longitude = -81.231998m,
                            Name = "Little Duck Key, Florida Keys",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Area near Turkey Point Nuclear Plant, adjacent to Biscayne National Park in Homestead, Florida.",
                            Latitude = 25.4341667m,
                            Longitude = -80.3297222m,
                            Name = "Turkey Point, Biscayne National Park",
                            Order = 4
                        });
                });

            modelBuilder.Entity("Domain.Models.Tackle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DeletedDate");

                    b.HasIndex("Type");

                    b.ToTable("Tackle");
                });

            modelBuilder.Entity("Domain.Models.FishingReport", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Models.Tackle", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
